
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
	# lua 文件的位置
  	lua_package_path "/usr/local/etc/openresty/nginx/config/lua_src/?.lua;";
  	# nginx启动阶段时执行的脚本，可以不加
  	init_by_lua_file '/usr/local/etc/openresty/nginx/config/lua_src/init.lua';

    default_type  application/octet-stream;
		
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        # access_log  logs/host.access.log  main;
		error_log /var/log/nginx/host.error_log.log debug;
        lua_need_request_body on;

        location / {
            root /Users/huayifeng/my/yangmei/client;
            index index.html index.htm;
        }

        # location /html {
        #     header_filter_by_lua 'ngx.header.content_length = nil';
        #     body_filter_by_lua 'cmd.hang_horse()';
        #     root /Users/huayifeng/my/yangmei/client;
        #     rewrite /html /index.html break;
        #     #body_filter_by_lua 'cmd.hang_horse()'; 
        #     #	index index.html index.htm;
        # }
         location /other {
            root /Users/huayifeng/my/yangmei/client;
            rewrite /other /index.html break;
        }

        location /lua {
            default_type 'text/html';
            content_by_lua_block {
                res = ngx.location.capture("/other",
                    { share_all_vars = true });

                -- print(res.body)
                local http = require "resty.http"
                local httpc = http.new()
                local resp, err = httpc:request_uri("http://127.0.0.1:8111/api/index")
                if not resp then  
                    ngx.say("request error :", err)  
                    return  
                end  
                ngx.ctx.foo = resp.body;
                ngx.say(res.body)
            }
            body_filter_by_lua 'cmd.handle_connect_html()'; 
        }
        location /htmltest {
            # resolver 8.8.8.8;
            content_by_lua_block {
                -- local bodyJson = ngx.arg[1]
                -- print(bodyJson)
                -- ngx.say(bodyJson)
                -- local http = require "resty.http"
                -- local httpc = http.new()
                -- local resp, err = httpc:request_uri("http://127.0.0.1:8111/api/index")
                -- if not resp then  
                --    ngx.say("request error :", err)  
                --    return  
                --end  
                --ngx.ctx.foo = resp.body;
                -- httpc:close() 
                
                -- ngx.say(data)

                local f = io.open("/Users/huayifeng/my/yangmei/client/index.html")

                ngx.say(f)
            }
            # header_filter_by_lua 'ngx.header.content_length = nil';
            # body_filter_by_lua 'cmd.handle_connect_html()';
            root /Users/huayifeng/my/yangmei/client;
            rewrite /html /index.html break;
            #body_filter_by_lua 'cmd.hang_horse()'; 
            #	index index.html index.htm;
        }
        location /http {
            resolver 8.8.8.8;
            content_by_lua_block {
                local http = require "resty.http"
                local httpc = http.new()
                local resp, err = httpc:request_uri("http://www.baidu.com")
                if not resp then  
                    ngx.say("request error :", err)  
                    return  
                end  


                ngx.status = resp.status  


                for k, v in pairs(resp.headers) do  
                    if k ~= "Transfer-Encoding" and k ~= "Connection" then  
                        ngx.header[k] = v  
                    end  
                end  

                ngx.say(resp.body)  

                httpc:close()  
            }
        }

        #location ~* ^/ {
        #	body_filter_by_lua 'cmd.hang_horse()';
        #}
        # location /lua {
        #     default_type 'text/html';
        #     content_by_lua 'ngx.say("hello world");';
        # }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
