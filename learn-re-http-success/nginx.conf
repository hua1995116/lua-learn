
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
	# lua 文件的位置
  	lua_package_path "/usr/local/etc/openresty/nginx/config/lua_src/?.lua;";
  	# nginx启动阶段时执行的脚本，可以不加
  	init_by_lua_file '/usr/local/etc/openresty/nginx/config/lua_src/init.lua';

    default_type  application/octet-stream;
		
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        rewrite ^/api/([0-9A-Za-z]+)/unauthorized$ /page/admin/unauthorized.json last;
        rewrite ^/api/([0-9A-Za-z]+)/login$ /page/admin/unlogined.json last;
        rewrite ^/unauthorized$ /page/admin/unauthorized.json last;
        rewrite ^/login$ /page/admin/unlogined.json last;
        listen       80;
        server_name local.page.banma.dev.sankuai.com;

        #charset koi8-r;

        access_log  /var/log/nginx/host.access_log.log;
		error_log /var/log/nginx/host.error_log.log debug;
        lua_need_request_body on;

        location /api {
            proxy_pass http://page.banma.dev.sankuai.com;
        }
        location /dist/page/ {
            proxy_pass http://localhost:8080/;
        } 
        location /dist/app/ {
            proxy_pass http://localhost:8080/;
        }

        location / {
            location /page/admin/unauthorized.json {
                add_header "sessionStatus" "unauthorized";
            }
            location /page/admin/unlogined.json {
                add_header "sessionStatus" "timeout";
            }

            # resolver 8.8.8.8;
            # default_type 'text/html';
            # content_by_lua_block {
            #     res = ngx.location.capture("/html"..ngx.var.request_uri)
            #     -- print(res.body) 
            #     -- local http = require "resty.http"
            #     -- local httpc = http.new()
            #     -- local resp, err = httpc:request_uri("http://front.mtsi.inf.dev.sankuai.com/source")
            #     -- if not resp then  
            #     --     ngx.say("request error :", err)  
            #     --     return  
            #     -- end  
            #     -- ngx.ctx.foo = resp.body
            #     ngx.say(res.body)

            #     -- ngx.say("/html"..ngx.var.request_uri)

            # }
            # body_filter_by_lua 'cmd.handle_connect_html()'; 
            root /Users/huayifeng/work/banma_page;
            index index.shtml index.html;
        }

        location /html {
            #处理跳转
            rewrite ^/html/capture/app/([0-9A-Za-z]+)$ /page/app/$1/index.shtml last;
            rewrite ^/html/capture/app/([0-9A-Za-z]+)/([0-9A-Za-z]+)$ /page/app/$1/$2.shtml last;
            rewrite ^/html/capture/([0-9A-Za-z]+)/([0-9A-Za-z]+)$ /page/$1/$2.shtml last;
            rewrite ^/html/capture/([0-9A-Za-z]+)/([0-9A-Za-z]+)/([0-9A-Za-z]+)$ /page/$1/$2-$3.shtml last;
            rewrite ^/html/capture/([0-9A-Za-z]+)/([0-9A-Za-z]+)/([0-9A-Za-z]+)/([0-9A-Za-z]+)$ /page/$1/$2-$3-$4.shtml last;

            root /Users/huayifeng/work/banma_page;
            index index.shtml index.html;
        }

        location /capture {
            resolver 8.8.8.8;
            default_type 'text/html';
            content_by_lua_block {
                res = ngx.location.capture("/html"..ngx.var.request_uri);
                -- print(res.body) 
                local http = require "resty.http"
                local httpc = http.new()
                local resp, err = httpc:request_uri("http://front.mtsi.inf.dev.sankuai.com/source")
                if not resp then  
                    ngx.say("request error :", err)  
                    return  
                end  
                ngx.ctx.foo = resp.body;
                ngx.say(res.body)

                -- res = ngx.location.capture("/html"..ngx.var.request_uri)
                -- res = ngx.location.capture("/other")
                -- ngx.say(type(res))
                -- ngx.say("/html"..ngx.var.request_uri)
                -- ngx.say(res.body)
                -- ngx.print(res)
                -- ngx.say(ngx.var.request_uri)
                
            }
            body_filter_by_lua 'cmd.handle_connect_html()'; 
        }       

        location /other {
            root /Users/huayifeng/my/yangmei/client;
            rewrite /other /index.html break;
        }

        location /lua {
            resolver 8.8.8.8;
            default_type 'text/html';
            content_by_lua_block {
                res = ngx.location.capture("/other",
                    { share_all_vars = true });

                -- print(res.body) 
                local http = require "resty.http"
                local httpc = http.new()
                local resp, err = httpc:request_uri("http://front.mtsi.inf.dev.sankuai.com/source")
                if not resp then  
                    ngx.say("request error :", err)  
                    return  
                end  
                ngx.ctx.foo = resp.body;
                ngx.say(res.body)
            }
            body_filter_by_lua 'cmd.handle_connect_html()'; 
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
